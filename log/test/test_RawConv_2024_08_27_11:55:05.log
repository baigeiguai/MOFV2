[2024-08-27 11:55:09,552][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0/', batch_size=128, model_path='checkpoints/RawConv/RawConv_epoch_93.pth', device='2', mode='test', top_k=5, parallel_model=False, test_name='RawConv', num_workers=20, log_name='log/test/test_RawConv_2024_08_27_11:55:05.log')
[2024-08-27 11:55:09,553][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (intensity_norm): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-08-27 11:55:09,554][test.py][line:36][INFO] ---------------device---------------
cuda:2
[2024-08-27 11:55:09,554][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-08-27 11:56:22,352][test.py][line:78][INFO] ---------------performance---------------
total_num:142729
error:2.283908
total_acc:0.6988208293914795
f1_score:0.4530319571495056
top5_acc:0.931247353553772
head_acc:0.7360906263152103
medium_acc:0.5840465185058522
tail_add:0.42561403694641786

[2024-08-27 11:56:22,353][test.py][line:89][INFO] ---------------per_class_acc---------------
[0.6130062, 0.758109, 0.05263158, 0.7278126, 0.74872136, 0.2777778, 0.44759557, 0.28977272, 0.66429716, 0.5081967, 0.6832907, 0.579646, 0.51261693, 0.7714831, 0.6051347, 0.65217394, 0.15789473, 0.6876164, 0.92258203, 0.66739607, 0.125, 0.10526316, 0.5590551, 0.29411766, 0.0, 0.2631579, 0.1764706, 0.22222222, 0.6408947, 0.23943663, 0.4384058, 0.16666667, 0.7232806, 0.23870967, 0.4, 0.5259366, 0.2881356, 0.3181818, 0.0, 0.33673468, 0.0, 0.5, 0.7876448, 0.35135135, 0.44728434, 0.2638889, 0.4, 0.13513513, 0.4, 0.2037037, 0.1923077, 0.4788494, 0.46478873, 0.2265625, 0.25827813, 0.5113817, 0.46277666, 0.40677965, 0.2631579, 0.65881306, 0.9359302, 0.77365386, 0.5821206, 0.0, 0.5631068, 0.15151516, 0.0, 0.0, 0.31746033, 0.7091837, 0.5277778, 0.55813956, 0.3566879, 0.5874126, 0.20689656, 0.42372882, 0.12903225, 0.41805226, 0.23134328, 0.46456692, 0.25862068, 0.7266289, 0.0, 0.4375, 0.63919824, 0.7942943, 0.57894737, 0.8422977, 0.0, 0.30769232, 0.17777778, 0.48670757, 0.0, 0.3301887, 0.23404256, 0.47952586, 0.1875, 0.7745098, 0.0, 0.0, 0.0, 0.07692308, 0.11764706, 0.704918, 0.0, 0.18867925, 0.16666667, 0.31578946, 0.13043478, 0.600939, 0.0, 0.05882353, 0.64748204, 0.7856, 0.0, 0.0952381, 0.45454547, 0.31914893, 0.375, 0.17857143, 0.35632184, 0.71304345, 0.8076923, 0.85106385, 0.9, 0.625, 0.04761905, 0.53846157, 0.60674155, 0.6504065, 0.7714286, 0.2, 0.36, 0.5, 0.3, 0.5652174, 0.36842105, 0.5753425, 0.4695652, 0.5416667, 0.5714286, 0.6520147, 0.28070176, 0.39175257, 0.39378238, 0.674581, 0.7536467, 0.8714832, 0.33333334, 0.037037037, 0.0, 0.563147, 0.09090909, 0.2670157, 0.23694779, 0.0, 0.22222222, 0.30769232, 0.4918919, 0.4375, 0.7655039, 0.4827586, 0.5967078, 0.46938777, 0.77662337, 0.6485623, 0.78070176, 0.07692308, 0.32676056, 0.556196, 0.075, 0.032258064, 0.5054645, 0.0625, 0.125, 0.69095474, 0.4, 0.52380955, 0.312, 0.225, 0.4, 0.4742268, 0.0, 0.2857143, 0.31578946, 0.33333334, 0.59090906, 0.0, 0.27272728, 0.27272728, 0.4848485, 0.7627119, 0.6315789, 0.6077348, 0.1, 0.82758623, 0.3809524, 0.90068495, 0.6865672, 0.46153846, 0.4, 0.16666667, 0.6363636, 0.625, 0.974359, 0.73239434, 0.23076923, 0.0, 0.17142858, 0.58064514, 0.55172414, 0.375, 0.6363636, 0.64285713, 0.45454547, 0.18181819, 0.72392637, 0.70422536, 0.6458333, 0.9794521, 0.86614174, 0.98717946, 0.68421054, 0.8125, 0.93235296, 0.6904762, 0.8068182, 0.8888889, 0.4090909, 0.9322034]
