[2024-07-25 10:11:43,189][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/SinAngleIntensityNorm/SinAngleIntensityNorm_epoch_100.pth', device='2', mode='test', top_k=5, parallel_model=False, test_name='SinAngleIntensityNorm', num_workers=20, log_name='log/test/test_SinAngleIntensityNorm_2024_07_25_10:11:31.log')
[2024-07-25 10:11:43,193][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (intensity_norm): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-25 10:11:43,211][test.py][line:36][INFO] ---------------device---------------
cuda:2
[2024-07-25 10:11:43,211][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-25 10:16:15,210][test.py][line:78][INFO] ---------------performance---------------	otal_num:141939
error:1.284228
total_acc:0.7942778468132019
f1_score:0.5688802599906921
top5_acc:0.9618286490440369
head_acc:0.8313218161710696
medium_acc:0.6768389110321895
tail_add:0.5356788046073624

[2024-07-25 10:16:15,219][test.py][line:89][INFO] ---------------per_class_acc---------------
[0.793243, 0.77618736, 0.14666666, 0.88466126, 0.84844416, 0.33333334, 0.6968195, 0.44886363, 0.7970756, 0.5, 0.7611492, 0.62513906, 0.6556387, 0.84158736, 0.73275584, 0.72727275, 0.5263158, 0.8428235, 0.9671674, 0.7891832, 0.2580645, 0.11111111, 0.672, 0.32352942, 0.0, 0.4473684, 0.11764706, 0.22222222, 0.80077934, 0.4225352, 0.67636365, 0.33333334, 0.842148, 0.46451613, 0.4, 0.70749277, 0.41379312, 0.4090909, 0.0, 0.37755102, 0.0, 0.55263156, 0.84318054, 0.43243244, 0.63987136, 0.5, 0.53333336, 0.5135135, 0.4, 0.5, 0.26923078, 0.6644068, 0.55714285, 0.40944883, 0.39333335, 0.6339904, 0.55040324, 0.6193182, 0.5530303, 0.75100404, 0.9456545, 0.83904505, 0.5908142, 0.0, 0.7378641, 0.32307693, 0.0, 0.0, 0.5714286, 0.7735849, 0.5915493, 0.6401869, 0.51282054, 0.72727275, 0.2413793, 0.5127119, 0.24193548, 0.43230402, 0.31343284, 0.6535433, 0.5948276, 0.8101983, 0.1875, 0.5833333, 0.8040089, 0.8511278, 0.6565097, 0.9339623, 0.0, 0.3653846, 0.1590909, 0.50769234, 0.0, 0.5188679, 0.4893617, 0.5091892, 0.375, 0.78431374, 1.0, 0.0, 0.0, 0.07692308, 0.5294118, 0.8032787, 1.0, 0.5660377, 0.083333336, 0.36842105, 0.26086956, 0.81220657, 0.0, 0.1764706, 0.68345326, 0.88461536, 0.0, 0.1904762, 0.45454547, 0.59574467, 0.3125, 0.5535714, 0.49425286, 0.7645349, 0.75641024, 0.78723407, 0.8666667, 0.7410714, 0.52380955, 0.6703297, 0.6853933, 0.86938775, 0.7285714, 0.3, 0.29166666, 0.53571427, 0.4, 0.73626375, 0.64912283, 0.69863015, 0.5478261, 0.5555556, 0.624, 0.8131868, 0.54385966, 0.48195878, 0.42746115, 0.72727275, 0.7711039, 0.9285714, 0.33333334, 0.2037037, 0.0, 0.47826087, 0.09090909, 0.3878628, 0.40160644, 0.0, 0.33333334, 0.32692307, 0.6918919, 0.5, 0.9031008, 0.5862069, 0.7201646, 0.5102041, 0.8727273, 0.6826923, 0.90450054, 0.0, 0.47740114, 0.49567723, 0.125, 0.06451613, 0.7479452, 0.0625, 0.375, 0.74811083, 0.71428573, 0.47619048, 0.48, 0.375, 0.32, 0.58762884, 0.0, 0.42857143, 0.15789473, 0.33333334, 0.72727275, 0.25, 0.45454547, 0.4431818, 0.6060606, 0.7966102, 0.5263158, 0.65555555, 0.2, 0.8448276, 0.64285713, 0.96575344, 0.74626863, 0.46153846, 0.52, 0.33333334, 0.76363635, 0.578125, 0.986014, 0.87323946, 0.46153846, 0.33333334, 0.25714287, 0.7419355, 0.6896552, 0.5416667, 0.8181818, 0.78571427, 0.4090909, 0.22727273, 0.82822084, 0.90140843, 0.8541667, 0.98630136, 0.86614174, 0.98717946, 0.7105263, 0.75, 0.9147059, 0.6904762, 0.8863636, 0.9305556, 0.36363637, 0.9830508]
