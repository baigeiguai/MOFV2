[2024-07-04 23:20:51,353][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ResTcn_8500_lins_5_90/ResTcn_8500_lins_5_90_epoch_119.pth', device='1', mode='test', top_k=5, parallel_model=False, test_name='ResTcn_8500_lins_5_90', num_workers=20, log_name='log/test/test_ResTcn_8500_lins_5_90_2024_07_04_23:20:44.log')
[2024-07-04 23:20:51,360][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0.1, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0.1, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0.1, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-04 23:20:51,360][test.py][line:36][INFO] ---------------device---------------
cuda:1
[2024-07-04 23:20:51,360][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-04 23:26:01,677][test.py][line:75][INFO] ---------------performance---------------	otal_num:141939
error:1.948142
total_acc:0.6988988518714905
f1_score:0.4729653596878052
top5_acc:0.9389949440956116
head_acc:0.7394386268417544
medium_acc:0.5683853852261217
tail_add:0.4268489142813629

[2024-07-04 23:26:01,679][test.py][line:86][INFO] ---------------per_class_acc---------------
[0.7202104, 0.7328128, 0.17333333, 0.8308943, 0.7734497, 0.3888889, 0.5952086, 0.30113637, 0.72485733, 0.25, 0.57890224, 0.36929923, 0.43527043, 0.7885335, 0.6281681, 0.045454547, 0.39473686, 0.72188234, 0.9270386, 0.62913907, 0.16129032, 0.16666667, 0.568, 0.29411766, 0.0, 0.35526314, 0.11764706, 0.22222222, 0.59693134, 0.28169015, 0.60727274, 0.23333333, 0.76410115, 0.37419355, 0.4, 0.610951, 0.37931034, 0.54545456, 0.0, 0.2857143, 0.0, 0.5263158, 0.713418, 0.5405405, 0.61736333, 0.3472222, 0.6, 0.43243244, 0.1, 0.35185185, 0.23076923, 0.47966102, 0.47142857, 0.32677165, 0.29333332, 0.5498135, 0.31048387, 0.48295453, 0.3030303, 0.56336457, 0.8953662, 0.6014632, 0.47599164, 0.0, 0.5533981, 0.26153848, 0.0, 0.0, 0.36507937, 0.7341338, 0.46478873, 0.43925235, 0.33333334, 0.57342654, 0.1724138, 0.43855932, 0.2580645, 0.51543945, 0.21641791, 0.56692916, 0.5086207, 0.8073654, 0.125, 0.33333334, 0.6837416, 0.7413534, 0.43767312, 0.8710692, 0.0, 0.3653846, 0.09090909, 0.52410257, 0.0, 0.254717, 0.34042552, 0.43891892, 0.29166666, 0.7058824, 1.0, 0.0, 0.0, 0.07692308, 0.11764706, 0.55737704, 1.0, 0.3773585, 0.083333336, 0.2631579, 0.13043478, 0.7230047, 0.0, 0.1764706, 0.66906476, 0.86858976, 0.0, 0.14285715, 0.3939394, 0.5638298, 0.4375, 0.58928573, 0.41379312, 0.75581396, 0.55128205, 0.80851066, 0.7, 0.6785714, 0.3809524, 0.64835167, 0.46067417, 0.77959186, 0.6857143, 0.1, 0.16666667, 0.60714287, 0.18, 0.43956044, 0.40350878, 0.46575344, 0.20869565, 0.375, 0.52, 0.72893775, 0.6666667, 0.58247423, 0.29274613, 0.7104895, 0.53896105, 0.8557909, 0.33333334, 0.11111111, 0.0, 0.3167702, 0.09090909, 0.4116095, 0.40160644, 0.0, 0.44444445, 0.28846154, 0.6054054, 0.28125, 0.76744187, 0.51724136, 0.63786006, 0.40816328, 0.75064933, 0.49358973, 0.68825465, 0.07692308, 0.42937854, 0.3573487, 0.125, 0.032258064, 0.60273975, 0.0, 0.375, 0.511335, 0.42857143, 0.31292516, 0.456, 0.1, 0.32, 0.39175257, 0.0, 0.2857143, 0.05263158, 0.1875, 0.6818182, 0.0, 0.36363637, 0.35227272, 0.56060606, 0.69491524, 0.31578946, 0.51666665, 0.3, 0.8965517, 0.75, 0.9520548, 0.58208954, 0.23076923, 0.68, 0.125, 0.74545455, 0.40625, 0.974359, 0.74647886, 0.07692308, 0.33333334, 0.2, 0.7096774, 0.41379312, 0.5833333, 0.42424244, 0.5, 0.36363637, 0.0, 0.4601227, 0.73239434, 0.6458333, 0.9726027, 0.7480315, 0.974359, 0.5263158, 0.4375, 0.5882353, 0.45238096, 0.67045456, 0.8472222, 0.09090909, 0.88135594]
