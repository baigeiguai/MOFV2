[2024-07-03 10:32:01,251][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='../MOF/data/Pymatgen_Wrapped/3/', batch_size=128, model_path='checkpoints/ResTcn_5000_1/ResTcn_5000_epoch_193.pth', device='0', mode='test', top_k=5, parallel_model=False, test_name='ResTch_5000_1', num_workers=20, log_name='log/test/test_ResTch_5000_1_2024_07_03_10:31:56.log')
[2024-07-03 10:32:01,265][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (conv): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (6): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (8): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (12): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (16): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (21): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (22): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (23): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
  )
  (mlp): Linear(in_features=1024, out_features=230, bias=True)
)
[2024-07-03 10:32:01,266][test.py][line:36][INFO] ---------------device---------------
cuda:0
[2024-07-03 10:32:01,266][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-03 10:34:38,637][test.py][line:75][INFO] ---------------performance---------------	otal_num:142732
error:3.948385
total_acc:0.4306112229824066
f1_score:0.3699732720851898
top5_acc:0.7200837731361389
head_acc:0.4376718102237942
medium_acc:0.40678105134925624
tail_add:0.3887171589487291

[2024-07-03 10:34:38,639][test.py][line:86][INFO] ---------------per_class_acc---------------
[0.35380933, 0.4546322, 0.05263158, 0.5012956, 0.5623749, 0.2777778, 0.21413893, 0.23863636, 0.39114982, 0.21311475, 0.29965898, 0.27765486, 0.25177205, 0.2899427, 0.37513262, 0.65217394, 0.15789473, 0.31098697, 0.63553506, 0.29540482, 0.21875, 0.10526316, 0.35433072, 0.1764706, 0.0, 0.25, 0.23529412, 0.22222222, 0.33333334, 0.22535211, 0.26811594, 0.13333334, 0.37751654, 0.20645161, 0.2, 0.34582132, 0.22033899, 0.45454547, 0.0, 0.24489796, 0.0, 0.39473686, 0.32211804, 0.35135135, 0.22683705, 0.2638889, 0.53333336, 0.16216215, 0.1, 0.2962963, 0.0, 0.2605753, 0.4225352, 0.16796875, 0.17218544, 0.21969296, 0.21730383, 0.25706214, 0.19548872, 0.32229385, 0.5795019, 0.4451923, 0.2765073, 0.0, 0.5825243, 0.121212125, 0.0, 0.0, 0.53968257, 0.31462586, 0.43055555, 0.34418604, 0.17197452, 0.45454547, 0.06896552, 0.31355932, 0.17741935, 0.28028503, 0.26865673, 0.2913386, 0.22413793, 0.6203966, 0.1875, 0.1875, 0.46770602, 0.43993995, 0.5207756, 0.59007835, 0.0, 0.28846154, 0.13333334, 0.30572596, 0.0, 0.3018868, 0.25531915, 0.34051725, 0.35416666, 0.6960784, 0.0, 0.0, 0.0, 0.07692308, 0.23529412, 0.5409836, 1.0, 0.11320755, 0.083333336, 0.2631579, 0.17391305, 0.36150235, 0.0, 0.05882353, 0.51079136, 0.4896, 0.0, 0.14285715, 0.33333334, 0.30851063, 0.1875, 0.39285713, 0.50574714, 0.38550726, 0.6923077, 0.7446808, 0.9, 0.3392857, 0.0952381, 0.50549453, 0.5730337, 0.398374, 0.6142857, 0.2, 0.04, 0.35714287, 0.16, 0.38043478, 0.19298245, 0.38356164, 0.37391305, 0.375, 0.3809524, 0.34065935, 0.37719297, 0.34020618, 0.31606218, 0.46927375, 0.63857377, 0.81026334, 0.33333334, 0.24074075, 0.0, 0.32298136, 0.18181819, 0.30366492, 0.37349397, 0.0, 0.22222222, 0.15384616, 0.34054053, 0.453125, 0.498062, 0.62068963, 0.5720165, 0.3877551, 0.561039, 0.61661345, 0.48355263, 0.07692308, 0.34084508, 0.32564843, 0.1, 0.032258064, 0.42349726, 0.0625, 0.25, 0.45728642, 0.6666667, 0.3605442, 0.304, 0.2, 0.24, 0.45360824, 0.0, 0.0, 0.21052632, 0.20833333, 0.6818182, 0.125, 0.22727273, 0.27272728, 0.6363636, 0.7457627, 0.5, 0.53038675, 0.3, 0.7758621, 0.6547619, 0.88013697, 0.7910448, 0.46153846, 0.28, 0.33333334, 0.6, 0.59375, 0.8787879, 0.64788735, 0.53846157, 0.0, 0.16666667, 0.67741936, 0.6551724, 0.45833334, 0.3939394, 0.71428573, 0.45454547, 0.22727273, 0.797546, 0.7183099, 0.5625, 0.760274, 0.79527557, 0.6923077, 0.57894737, 0.5625, 0.89705884, 0.47619048, 0.80898875, 0.6527778, 0.45454547, 0.5423729]
