[2024-08-12 13:00:40,497][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0', batch_size=128, model_path='checkpoints/RawEmbedConv/RawEmbedConv_epoch_61.pth', device='6', mode='test', top_k=5, parallel_model=False, test_name='RawEmbedConv', num_workers=20, log_name='log/test/test_RawEmbedConv_2024_08_12_13:00:25.log')
[2024-08-12 13:00:40,500][test.py][line:35][INFO] ---------------model---------------
RawEmbedConv(
  (embed): Embedding(8500, 32)
  (conv): ResTcn(
    (conv): Sequential(
      (0): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (10): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (12): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (14): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (16): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (18): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (20): Dropout(p=0.1, inplace=False)
      (21): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (23): Dropout(p=0.1, inplace=False)
      (24): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (26): Dropout(p=0.1, inplace=False)
      (27): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (29): Flatten(start_dim=1, end_dim=-1)
      (30): Linear(in_features=1024, out_features=230, bias=True)
    )
  )
)
[2024-08-12 13:00:40,501][test.py][line:36][INFO] ---------------device---------------
cuda:6
[2024-08-12 13:00:40,501][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-08-12 13:03:39,898][test.py][line:78][INFO] ---------------performance---------------
total_num:142729
error:1.849496
total_acc:0.6864407658576965
f1_score:0.47759270668029785
top5_acc:0.9278072714805603
head_acc:0.71300265909021
medium_acc:0.6073461357969543
tail_add:0.47893267264805583

[2024-08-12 13:03:39,899][test.py][line:89][INFO] ---------------per_class_acc---------------
[0.5559545, 0.5430358, 0.078947365, 0.7594472, 0.7295975, 0.2777778, 0.4221126, 0.35227272, 0.6694509, 0.3114754, 0.65984654, 0.5818584, 0.51261693, 0.6693189, 0.6815192, 0.65217394, 0.31578946, 0.693203, 0.93309027, 0.6269147, 0.125, 0.10526316, 0.61417323, 0.23529412, 0.0, 0.35526314, 0.11764706, 0.11111111, 0.6656941, 0.28169015, 0.5942029, 0.22222222, 0.7181462, 0.38064516, 0.4, 0.5979827, 0.3898305, 0.36363637, 0.0, 0.35714287, 0.0, 0.4473684, 0.7440706, 0.3783784, 0.52715653, 0.4027778, 0.4, 0.27027026, 0.2, 0.2777778, 0.23076923, 0.47038916, 0.5070422, 0.25390625, 0.3576159, 0.4785601, 0.5573441, 0.4915254, 0.32330826, 0.660369, 0.8762239, 0.79423076, 0.5779626, 0.0, 0.592233, 0.16666667, 0.0, 0.0, 0.3968254, 0.60374147, 0.43055555, 0.51627904, 0.41401273, 0.55944055, 0.1724138, 0.654661, 0.29032257, 0.2375297, 0.24626866, 0.42519686, 0.5344828, 0.7322946, 0.125, 0.47916666, 0.73942095, 0.7957958, 0.6869806, 0.8992167, 0.0, 0.3653846, 0.35555556, 0.25562373, 0.0, 0.5188679, 0.21276596, 0.7112069, 0.3125, 0.7254902, 0.0, 0.0, 0.0, 0.07692308, 0.23529412, 0.6721311, 1.0, 0.49056605, 0.083333336, 0.42105263, 0.26086956, 0.70422536, 0.0, 0.11764706, 0.64748204, 0.8416, 0.0, 0.1904762, 0.54545456, 0.5851064, 0.3125, 0.375, 0.51724136, 0.56811595, 0.75641024, 0.82978725, 0.8666667, 0.66964287, 0.23809524, 0.64835167, 0.6741573, 0.7845529, 0.71428573, 0.5, 0.08, 0.5714286, 0.44, 0.5652174, 0.5263158, 0.72602737, 0.38260868, 0.5694444, 0.54761904, 0.7728938, 0.4649123, 0.36597937, 0.39637306, 0.674581, 0.73257697, 0.9011929, 0.33333334, 0.14814815, 0.0, 0.55693585, 0.09090909, 0.32460734, 0.30522087, 0.0, 0.22222222, 0.32692307, 0.5891892, 0.5625, 0.81395346, 0.6896552, 0.6872428, 0.46938777, 0.7220779, 0.7220447, 0.79605263, 0.15384616, 0.3971831, 0.5100865, 0.075, 0.06451613, 0.6939891, 0.0625, 0.29166666, 0.64572865, 0.53333336, 0.59183675, 0.376, 0.275, 0.28, 0.58762884, 0.0, 0.0, 0.21052632, 0.33333334, 0.6363636, 0.25, 0.3181818, 0.3409091, 0.45454547, 0.7627119, 0.57894737, 0.64640886, 0.3, 0.7241379, 0.3452381, 0.8458904, 0.67164177, 0.23076923, 0.44, 0.375, 0.72727275, 0.734375, 0.983683, 0.90140843, 0.46153846, 0.33333334, 0.17142858, 0.7741935, 0.62068963, 0.5416667, 0.4848485, 0.78571427, 0.5, 0.4090909, 0.73619634, 0.8309859, 0.7916667, 0.94520545, 0.8503937, 0.98717946, 0.7631579, 0.75, 0.9, 0.85714287, 0.78409094, 0.9444444, 0.36363637, 0.9661017]
