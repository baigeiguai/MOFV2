[2024-07-03 23:01:16,652][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='../MOF/data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ResTcn_8500_mayraw/ResTcn_8500_mayraw_epoch_67.pth', device='3', mode='test', top_k=5, parallel_model=False, test_name='ResTcn_mayraw', num_workers=20, log_name='log/test/test_ResTcn_mayraw_2024_07_03_23:01:15.log')
[2024-07-03 23:01:16,653][test.py][line:35][INFO] ---------------model---------------
RES_TCN(
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0.1, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0.1, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0.1, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-03 23:01:16,658][test.py][line:36][INFO] ---------------device---------------
cuda:3
[2024-07-03 23:01:16,658][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-03 23:02:51,382][test.py][line:75][INFO] ---------------performance---------------	otal_num:142732
error:1.495854
total_acc:0.7338648438453674
f1_score:0.5329138040542603
top5_acc:0.9509220123291016
head_acc:0.7682945143393064
medium_acc:0.621145733160594
tail_add:0.5131375577726863

[2024-07-03 23:02:51,383][test.py][line:86][INFO] ---------------per_class_acc---------------
[0.64339846, 0.6551834, 0.13157895, 0.7324552, 0.7547254, 0.2777778, 0.5371969, 0.29545453, 0.6978852, 0.29508197, 0.73955667, 0.55199116, 0.5766941, 0.8304689, 0.69785696, 0.65217394, 0.34210527, 0.79562384, 0.9486382, 0.6608315, 0.34375, 0.05263158, 0.62204725, 0.14705883, 0.0, 0.40789473, 0.29411766, 0.11111111, 0.7746171, 0.32394367, 0.57246375, 0.18888889, 0.6549115, 0.4, 0.2, 0.5288184, 0.37288135, 0.4090909, 0.0, 0.26530612, 0.0, 0.47368422, 0.79040265, 0.45945945, 0.5111821, 0.31944445, 0.6, 0.4054054, 0.4, 0.5185185, 0.42307693, 0.5431472, 0.5492958, 0.4453125, 0.38410595, 0.6664902, 0.4607646, 0.49717513, 0.43609023, 0.78195155, 0.9758408, 0.79557693, 0.6257796, 0.0, 0.6699029, 0.28787878, 0.0, 0.0, 0.44444445, 0.7346939, 0.375, 0.5860465, 0.3566879, 0.6083916, 0.27586207, 0.625, 0.5, 0.26840854, 0.17910448, 0.6614173, 0.47413793, 0.7322946, 0.1875, 0.6041667, 0.844098, 0.8828829, 0.56786704, 0.9284595, 0.0, 0.63461536, 0.24444444, 0.41002044, 0.0, 0.6226415, 0.44680852, 0.6002155, 0.33333334, 0.7254902, 1.0, 0.0, 0.0, 0.15384616, 0.11764706, 0.6721311, 1.0, 0.5283019, 0.083333336, 0.31578946, 0.26086956, 0.7699531, 0.0, 0.1764706, 0.705036, 0.9072, 0.0, 0.33333334, 0.75757575, 0.59574467, 0.3125, 0.44642857, 0.47126436, 0.7710145, 0.85897434, 0.80851066, 0.8666667, 0.84821427, 0.42857143, 0.7802198, 0.6966292, 0.9308943, 0.87142855, 0.4, 0.48, 0.6785714, 0.44, 0.51086956, 0.68421054, 0.7671233, 0.6086956, 0.5277778, 0.5555556, 0.7948718, 0.33333334, 0.24226804, 0.41709843, 0.5293296, 0.72447324, 0.9101958, 0.33333334, 0.12962963, 0.0, 0.5010352, 0.09090909, 0.2958115, 0.28514057, 0.0, 0.22222222, 0.25, 0.4972973, 0.6171875, 0.7655039, 0.6896552, 0.61728394, 0.5510204, 0.81038964, 0.6773163, 0.8607456, 0.07692308, 0.47323942, 0.35446686, 0.125, 0.06451613, 0.6420765, 0.0625, 0.29166666, 0.68592966, 0.6, 0.6394558, 0.376, 0.45, 0.24, 0.57731956, 0.0, 0.2857143, 0.10526316, 0.27083334, 0.4090909, 0.375, 0.27272728, 0.32954547, 0.74242425, 0.8135593, 0.65789473, 0.7292818, 0.2, 0.55172414, 0.6904762, 0.9828767, 0.40298507, 0.61538464, 0.72, 0.20833333, 0.6181818, 0.484375, 0.98834497, 0.92957747, 0.30769232, 0.33333334, 0.4722222, 0.87096775, 0.7586207, 0.375, 0.6363636, 1.0, 0.54545456, 0.4090909, 0.76073617, 0.8309859, 0.8541667, 1.0, 0.87401575, 0.96153843, 0.7894737, 0.375, 0.8617647, 0.61904764, 0.8876405, 0.9861111, 0.3181818, 0.9661017]
