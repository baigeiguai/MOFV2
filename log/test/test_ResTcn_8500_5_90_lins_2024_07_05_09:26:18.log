[2024-07-05 09:26:25,819][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ResTcn_8500_lins_5_90/ResTcn_8500_lins_5_90_epoch_300.pth', device='1', mode='test', top_k=5, parallel_model=False, test_name='ResTcn_8500_5_90_lins', num_workers=20, log_name='log/test/test_ResTcn_8500_5_90_lins_2024_07_05_09:26:18.log')
[2024-07-05 09:26:25,838][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0.1, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0.1, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0.1, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-05 09:26:25,838][test.py][line:36][INFO] ---------------device---------------
cuda:1
[2024-07-05 09:26:25,839][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-05 09:31:00,224][test.py][line:75][INFO] ---------------performance---------------	otal_num:141939
error:1.986821
total_acc:0.7706831693649292
f1_score:0.5621117353439331
top5_acc:0.9515002965927124
head_acc:0.8065378595727203
medium_acc:0.6558222955367444
tail_add:0.5242735690291873

[2024-07-05 09:31:00,225][test.py][line:86][INFO] ---------------per_class_acc---------------
[0.7388226, 0.73498154, 0.14666666, 0.8620054, 0.8148646, 0.33333334, 0.64849234, 0.3806818, 0.76943654, 0.43333334, 0.7216981, 0.5717464, 0.5894707, 0.8060755, 0.70227784, 0.72727275, 0.47368422, 0.8032941, 0.95987123, 0.7494481, 0.19354838, 0.22222222, 0.648, 0.29411766, 0.0, 0.36842105, 0.23529412, 0.33333334, 0.780565, 0.32394367, 0.63272727, 0.31111112, 0.81184906, 0.41290322, 0.4, 0.6541787, 0.36206895, 0.45454547, 0.0, 0.3877551, 0.0, 0.47368422, 0.8128106, 0.45945945, 0.61736333, 0.41666666, 0.6666667, 0.45945945, 0.3, 0.44444445, 0.30769232, 0.60677963, 0.55714285, 0.43700787, 0.40666667, 0.6201385, 0.5, 0.6051136, 0.4318182, 0.764614, 0.94469357, 0.8155564, 0.5887265, 0.0, 0.6407767, 0.32307693, 0.0, 0.0, 0.47619048, 0.75643224, 0.5915493, 0.63084114, 0.49358973, 0.6853147, 0.2413793, 0.50635594, 0.4032258, 0.42517814, 0.29850745, 0.62204725, 0.5948276, 0.776204, 0.125, 0.41666666, 0.7817372, 0.8481203, 0.61495847, 0.9360587, 0.0, 0.32692307, 0.20454545, 0.47589743, 0.0, 0.49056605, 0.3617021, 0.50702703, 0.39583334, 0.7352941, 1.0, 0.0, 0.0, 0.15384616, 0.1764706, 0.852459, 1.0, 0.5283019, 0.16666667, 0.42105263, 0.26086956, 0.8262911, 0.0, 0.29411766, 0.74820143, 0.900641, 0.0, 0.14285715, 0.5151515, 0.62765956, 0.4375, 0.58928573, 0.49425286, 0.7645349, 0.71794873, 0.87234044, 0.9, 0.79464287, 0.42857143, 0.7032967, 0.6292135, 0.844898, 0.7285714, 0.4, 0.20833333, 0.64285713, 0.32, 0.6923077, 0.54385966, 0.69863015, 0.53913045, 0.5138889, 0.64, 0.7985348, 0.47368422, 0.43814433, 0.43523315, 0.7006993, 0.76623374, 0.9391618, 0.33333334, 0.24074075, 0.07692308, 0.50931674, 0.09090909, 0.39050132, 0.39759037, 0.0, 0.33333334, 0.3846154, 0.64324325, 0.5078125, 0.8449612, 0.62068963, 0.6872428, 0.5714286, 0.82597405, 0.67628205, 0.8605928, 0.07692308, 0.4519774, 0.4985591, 0.125, 0.06451613, 0.7123288, 0.0625, 0.29166666, 0.74055415, 0.85714287, 0.53061223, 0.376, 0.4, 0.32, 0.53608245, 0.0, 0.2857143, 0.31578946, 0.33333334, 0.6818182, 0.25, 0.5, 0.39772728, 0.530303, 0.8305085, 0.57894737, 0.67777777, 0.2, 0.8448276, 0.6666667, 0.96575344, 0.74626863, 0.3846154, 0.52, 0.29166666, 0.6909091, 0.640625, 0.983683, 0.87323946, 0.3846154, 0.33333334, 0.25714287, 0.67741936, 0.62068963, 0.625, 0.6969697, 0.71428573, 0.5, 0.27272728, 0.76687115, 0.87323946, 0.7708333, 0.9794521, 0.8976378, 0.98717946, 0.7368421, 0.8125, 0.9352941, 0.61904764, 0.8636364, 0.9583333, 0.4090909, 0.9491525]
