[2024-07-06 09:04:35,746][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0', batch_size=128, model_path='checkpoints/ResTcn_8500_data0/ResTcn_8500_data0_epoch_196.pth', device='0', mode='test', top_k=5, parallel_model=False, test_name='ResTcn_8500_5_90_data0', num_workers=20, log_name='log/test/test_ResTcn_8500_5_90_data0_2024_07_06_09:04:29.log')
[2024-07-06 09:04:35,749][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0.1, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0.1, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0.1, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-06 09:04:35,751][test.py][line:36][INFO] ---------------device---------------
cuda:0
[2024-07-06 09:04:35,751][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-06 09:08:19,673][test.py][line:77][INFO] ---------------performance---------------	otal_num:142729
error:1.901413
total_acc:0.7540163397789001
f1_score:0.5455195307731628
top5_acc:0.9477611184120178
head_acc:0.7881796098284385
medium_acc:0.6458375961690437
tail_add:0.5176253682203947

[2024-07-06 09:08:19,674][test.py][line:88][INFO] ---------------per_class_acc---------------
[0.6997806, 0.75344497, 0.065789476, 0.84754914, 0.80831665, 0.2777778, 0.57912046, 0.3465909, 0.74373555, 0.36065573, 0.71312875, 0.5674779, 0.53132975, 0.77646935, 0.7017823, 0.65217394, 0.2631579, 0.7327747, 0.9460648, 0.7242888, 0.21875, 0.05263158, 0.5905512, 0.29411766, 0.0, 0.40789473, 0.11764706, 0.0, 0.75954294, 0.32394367, 0.57246375, 0.22222222, 0.7894879, 0.3935484, 0.4, 0.63544667, 0.30508474, 0.5, 0.0, 0.3265306, 0.0, 0.5263158, 0.8058467, 0.4054054, 0.57507986, 0.3888889, 0.6, 0.3783784, 0.4, 0.35185185, 0.26923078, 0.534687, 0.53521127, 0.3515625, 0.3576159, 0.6146109, 0.5030181, 0.5141243, 0.37593985, 0.7277173, 0.93199235, 0.7821154, 0.5530146, 0.0, 0.60194176, 0.28787878, 0.0, 0.0, 0.4920635, 0.707483, 0.4722222, 0.5860465, 0.46496814, 0.6433566, 0.2413793, 0.4957627, 0.29032257, 0.40855107, 0.29104477, 0.5905512, 0.61206895, 0.8016997, 0.125, 0.47916666, 0.78396434, 0.8618619, 0.6703601, 0.92584854, 0.0, 0.3653846, 0.26666668, 0.48670757, 0.0, 0.5188679, 0.3617021, 0.50431037, 0.375, 0.78431374, 0.0, 0.0, 0.0, 0.23076923, 0.29411766, 0.78688526, 1.0, 0.5849057, 0.083333336, 0.47368422, 0.2173913, 0.8169014, 0.0, 0.29411766, 0.7122302, 0.9216, 0.0, 0.1904762, 0.45454547, 0.60638297, 0.375, 0.48214287, 0.49425286, 0.73333335, 0.74358976, 0.82978725, 0.93333334, 0.73214287, 0.42857143, 0.64835167, 0.6516854, 0.8577236, 0.7714286, 0.5, 0.24, 0.5714286, 0.4, 0.6630435, 0.5263158, 0.7123288, 0.51304346, 0.5833333, 0.53968257, 0.7838828, 0.50877196, 0.43041238, 0.46632123, 0.7248603, 0.74230146, 0.9311276, 0.33333334, 0.2037037, 0.0, 0.47826087, 0.09090909, 0.34293193, 0.36546186, 0.0, 0.22222222, 0.40384614, 0.7027027, 0.46875, 0.8643411, 0.6551724, 0.7037037, 0.46938777, 0.84935063, 0.6805112, 0.84210527, 0.07692308, 0.44788733, 0.4610951, 0.15, 0.06451613, 0.69945353, 0.0625, 0.33333334, 0.7236181, 0.6666667, 0.50340134, 0.416, 0.425, 0.44, 0.5154639, 0.0, 0.2857143, 0.2631579, 0.29166666, 0.72727275, 0.25, 0.45454547, 0.4318182, 0.6060606, 0.8135593, 0.55263156, 0.7292818, 0.2, 0.8448276, 0.60714287, 0.9691781, 0.76119405, 0.3846154, 0.68, 0.25, 0.8, 0.640625, 0.997669, 0.90140843, 0.3846154, 0.33333334, 0.2857143, 0.7741935, 0.6896552, 0.7083333, 0.54545456, 0.78571427, 0.45454547, 0.22727273, 0.85276073, 0.8873239, 0.8541667, 0.9931507, 0.8976378, 0.98717946, 0.7894737, 0.75, 0.9529412, 0.78571427, 0.9431818, 0.9861111, 0.6363636, 0.9661017]
