[2024-08-11 12:32:57,479][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0', batch_size=64, model_path='checkpoints/SConv_extend_2/SConv_extend_2_epoch_99.pth', device='1', mode='test', top_k=5, parallel_model=False, test_name='SConv_extend2', num_workers=20, log_name='log/test/test_SConv_extend2_2024_08_11_12:32:50.log')
[2024-08-11 12:32:57,481][test.py][line:35][INFO] ---------------model---------------
SResTcn(
  (embed): Embedding(8500, 32)
  (conv): ModuleList(
    (0): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (1): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (2): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (3): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): MaxPool1d(kernel_size=2, stride=2, padding=1, dilation=1, ceil_mode=False)
    )
    (4): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    )
    (5): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    )
    (6): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    )
    (7): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    )
    (8-10): 3 x SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (dropout): Dropout(p=0.15, inplace=False)
    )
    (11): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (dropout): Dropout(p=0.15, inplace=False)
    )
    (12): SConvBlock(
      (angleConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (intensityConvBlock): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (pooling): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    )
  )
  (linear): Linear(in_features=1024, out_features=230, bias=True)
)
[2024-08-11 12:32:57,481][test.py][line:36][INFO] ---------------device---------------
cuda:1
[2024-08-11 12:32:57,482][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-08-11 12:35:32,569][test.py][line:78][INFO] ---------------performance---------------
total_num:142729
error:5.331505
total_acc:0.37728843092918396
f1_score:0.28090929985046387
top5_acc:0.754906177520752
head_acc:0.4013475597326231
medium_acc:0.2873346715180715
tail_add:0.2758834486002451

[2024-08-11 12:35:32,569][test.py][line:89][INFO] ---------------per_class_acc---------------
[0.45621383, 0.43873224, 0.013157895, 0.44094148, 0.33244386, 0.11111111, 0.1483765, 0.10227273, 0.43557847, 0.06557377, 0.19650468, 0.19247788, 0.124468386, 0.3640993, 0.33237854, 0.73913044, 0.02631579, 0.19413407, 0.6611623, 0.15864332, 0.0, 0.05263158, 0.1496063, 0.0882353, 0.0, 0.13157895, 0.11764706, 0.11111111, 0.20350109, 0.09859155, 0.18478261, 0.06666667, 0.34008917, 0.15483871, 0.2, 0.25216138, 0.033898305, 0.27272728, 0.0, 0.18367347, 0.0, 0.36842105, 0.20794263, 0.13513513, 0.11821086, 0.18055555, 0.2, 0.16216215, 0.0, 0.16666667, 0.03846154, 0.1285956, 0.2535211, 0.04296875, 0.06622516, 0.1312864, 0.09054326, 0.18079096, 0.11278196, 0.2513892, 0.5609834, 0.4425, 0.21621622, 0.0, 0.33009708, 0.07575758, 0.0, 0.0, 0.20634921, 0.16156463, 0.18055555, 0.2372093, 0.07643312, 0.32867134, 0.0, 0.22033899, 0.032258064, 0.2375297, 0.104477614, 0.17322835, 0.02586207, 0.42492917, 0.125, 0.020833334, 0.23162584, 0.25525525, 0.3102493, 0.42088774, 0.0, 0.15384616, 0.044444446, 0.26584867, 0.0, 0.1509434, 0.12765957, 0.24568966, 0.083333336, 0.5686275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18032786, 1.0, 0.018867925, 0.083333336, 0.2631579, 0.08695652, 0.18779343, 0.0, 0.0, 0.42446044, 0.2224, 0.0, 0.0952381, 0.3030303, 0.19148937, 0.125, 0.05357143, 0.28735632, 0.2057971, 0.64102566, 0.7446808, 0.8666667, 0.15178572, 0.04761905, 0.34065935, 0.39325842, 0.33333334, 0.44285715, 0.3, 0.0, 0.25, 0.08, 0.3043478, 0.0877193, 0.1780822, 0.33913043, 0.2638889, 0.24603175, 0.26739928, 0.25438598, 0.29381442, 0.29533678, 0.4455307, 0.38411668, 0.68714833, 0.33333334, 0.09259259, 0.0, 0.23188406, 0.09090909, 0.19109948, 0.26506025, 0.0, 0.22222222, 0.13461539, 0.1891892, 0.421875, 0.40503877, 0.3448276, 0.44855967, 0.26530612, 0.35844156, 0.49840257, 0.35416666, 0.0, 0.22253521, 0.2334294, 0.075, 0.06451613, 0.2021858, 0.0625, 0.16666667, 0.2964824, 0.46666667, 0.23129252, 0.112, 0.1, 0.08, 0.39175257, 0.0, 0.0, 0.10526316, 0.16666667, 0.5, 0.0, 0.09090909, 0.125, 0.43939394, 0.55932206, 0.36842105, 0.40331492, 0.2, 0.6896552, 0.64285713, 0.85958904, 0.6119403, 0.3846154, 0.32, 0.25, 0.5272727, 0.546875, 0.81351984, 0.45070422, 0.3846154, 0.0, 0.2, 0.7096774, 0.55172414, 0.16666667, 0.33333334, 0.64285713, 0.3181818, 0.22727273, 0.797546, 0.52112675, 0.35416666, 0.7191781, 0.7401575, 0.6666667, 0.5, 0.5625, 0.81764704, 0.5714286, 0.77272725, 0.5416667, 0.36363637, 0.4915254]
