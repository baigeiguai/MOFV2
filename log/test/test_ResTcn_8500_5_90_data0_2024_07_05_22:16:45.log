[2024-07-05 22:16:51,482][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0', batch_size=128, model_path='checkpoints/ResTcn_8500_data0/ResTcn_8500_data0_epoch_96.pth', device='0', mode='test', top_k=5, parallel_model=False, test_name='ResTcn_8500_5_90_data0', num_workers=20, log_name='log/test/test_ResTcn_8500_5_90_data0_2024_07_05_22:16:45.log')
[2024-07-05 22:16:51,497][test.py][line:35][INFO] ---------------model---------------
ResTcn(
  (TCN): Sequential(
    (0): ResBlock1D(
      (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (2): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (4): ResBlock1D(
      (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): ResBlock1D(
      (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (8): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (10): ResBlock1D(
      (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (12): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (14): ResBlock1D(
      (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
    (16): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (18): ResBlock1D(
      (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (20): Dropout(p=0.1, inplace=False)
    (21): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (23): Dropout(p=0.1, inplace=False)
    (24): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (26): Dropout(p=0.1, inplace=False)
    (27): ResBlock1D(
      (pre): Identity()
      (conv): Sequential(
        (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): LeakyReLU(negative_slope=0.01)
        (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
        (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): LeakyReLU(negative_slope=0.01)
    )
    (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
    (29): Flatten(start_dim=1, end_dim=-1)
    (30): Linear(in_features=1024, out_features=230, bias=True)
  )
)
[2024-07-05 22:16:51,498][test.py][line:36][INFO] ---------------device---------------
cuda:0
[2024-07-05 22:16:51,498][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-05 22:21:04,417][test.py][line:77][INFO] ---------------performance---------------	otal_num:142729
error:1.604603
total_acc:0.7386655807495117
f1_score:0.5284759998321533
top5_acc:0.9454700946807861
head_acc:0.7712265181105215
medium_acc:0.6370336989391681
tail_add:0.5063999825052146

[2024-07-05 22:21:04,418][test.py][line:88][INFO] ---------------per_class_acc---------------
[0.71254736, 0.69217724, 0.078947365, 0.8239041, 0.79831, 0.2777778, 0.59062886, 0.3465909, 0.7234761, 0.36065573, 0.65004265, 0.5143805, 0.51403457, 0.76522386, 0.6899003, 0.65217394, 0.2631579, 0.7225326, 0.92118806, 0.6695843, 0.25, 0.15789473, 0.61417323, 0.2647059, 0.0, 0.43421054, 0.1764706, 0.0, 0.73571604, 0.29577464, 0.64492756, 0.24444444, 0.79732466, 0.36774194, 0.4, 0.66426516, 0.44067797, 0.45454547, 0.0, 0.35714287, 0.0, 0.5263158, 0.7964699, 0.43243244, 0.5686901, 0.3888889, 0.46666667, 0.27027026, 0.3, 0.3148148, 0.30769232, 0.5245347, 0.5492958, 0.30859375, 0.40397352, 0.5987295, 0.47082496, 0.5254237, 0.37593985, 0.73905313, 0.9255002, 0.74403846, 0.5779626, 0.0, 0.5631068, 0.36363637, 0.0, 0.0, 0.46031746, 0.6904762, 0.43055555, 0.55813956, 0.45859873, 0.6083916, 0.27586207, 0.529661, 0.29032257, 0.42042756, 0.2835821, 0.61417323, 0.5, 0.7889518, 0.0625, 0.35416666, 0.7906459, 0.8423423, 0.6759003, 0.91644907, 0.0, 0.3653846, 0.13333334, 0.3568507, 0.0, 0.4528302, 0.29787233, 0.6325431, 0.3125, 0.75490195, 0.0, 0.0, 0.0, 0.30769232, 0.29411766, 0.7704918, 1.0, 0.5283019, 0.083333336, 0.47368422, 0.13043478, 0.74178404, 0.0, 0.3529412, 0.705036, 0.8944, 0.0, 0.23809524, 0.4848485, 0.5638298, 0.25, 0.5, 0.47126436, 0.7246377, 0.7307692, 0.85106385, 0.93333334, 0.8125, 0.3809524, 0.62637365, 0.7303371, 0.87398374, 0.7714286, 0.4, 0.28, 0.60714287, 0.38, 0.67391306, 0.47368422, 0.69863015, 0.49565217, 0.5694444, 0.61904764, 0.7655678, 0.5614035, 0.48453608, 0.41450778, 0.7416201, 0.6969206, 0.9176232, 0.33333334, 0.2037037, 0.0, 0.48861283, 0.09090909, 0.31675392, 0.3694779, 0.0, 0.33333334, 0.3653846, 0.6756757, 0.421875, 0.8217054, 0.6551724, 0.7037037, 0.4489796, 0.8025974, 0.66134185, 0.86403507, 0.07692308, 0.43661973, 0.4755043, 0.1, 0.032258064, 0.69945353, 0.0625, 0.33333334, 0.7361809, 0.6666667, 0.43537414, 0.36, 0.35, 0.4, 0.49484536, 0.0, 0.14285715, 0.10526316, 0.29166666, 0.6818182, 0.125, 0.4090909, 0.39772728, 0.6666667, 0.7966102, 0.57894737, 0.71270716, 0.2, 0.8448276, 0.39285713, 0.9589041, 0.7761194, 0.46153846, 0.48, 0.20833333, 0.7818182, 0.65625, 0.993007, 0.85915494, 0.53846157, 0.33333334, 0.22857143, 0.8064516, 0.6896552, 0.7916667, 0.54545456, 0.78571427, 0.59090906, 0.13636364, 0.86503065, 0.9577465, 0.875, 0.9931507, 0.8582677, 0.98717946, 0.7894737, 0.75, 0.9529412, 0.7380952, 0.89772725, 0.9722222, 0.54545456, 0.9661017]
