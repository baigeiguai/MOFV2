[2024-07-19 13:48:44,410][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ExploreV1_Res_hkl_Mam_BigWD/ExploreV1_Res_hkl_Mam_BigWD_epoch_60.pth', device='7', mode='test', top_k=5, parallel_model=False, test_name='Explore_Mam_BigWD', num_workers=20, log_name='log/test/test_Explore_Mam_BigWD_2024_07_19_13:48:43.log')
[2024-07-19 13:48:44,412][test.py][line:35][INFO] ---------------model---------------
ExplorerV1(
  (predict_hkl_block): BiMamba(
    (layers): ModuleList(
      (0-3): 4 x ResidualBlock(
        (mixer): MambaBlock(
          (in_proj): Linear(in_features=2, out_features=8, bias=False)
          (conv1d): Conv1d(4, 4, kernel_size=(4,), stride=(1,), padding=(3,), groups=4)
          (x_proj): Linear(in_features=4, out_features=33, bias=False)
          (dt_proj): Linear(in_features=1, out_features=4, bias=True)
          (out_proj): Linear(in_features=4, out_features=2, bias=False)
        )
        (norm): RMSNorm()
      )
    )
    (norm_f): RMSNorm()
  )
  (project): Linear(in_features=2, out_features=3, bias=True)
  (conv): ResTcn(
    (conv): Sequential(
      (0): ResBlock1D(
        (pre): Conv1d(3, 32, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (10): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (12): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (14): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (16): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (18): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (20): Dropout(p=0.1, inplace=False)
      (21): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (23): Dropout(p=0.1, inplace=False)
      (24): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (26): Dropout(p=0.1, inplace=False)
      (27): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (29): Flatten(start_dim=1, end_dim=-1)
      (30): Linear(in_features=1024, out_features=230, bias=True)
    )
  )
)
[2024-07-19 13:48:44,412][test.py][line:36][INFO] ---------------device---------------
cuda:7
[2024-07-19 13:48:44,412][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-19 13:52:11,049][test.py][line:77][INFO] ---------------performance---------------	otal_num:141939
error:3.821108
total_acc:0.5415143370628357
f1_score:0.3998040556907654
top5_acc:0.8406216502189636
head_acc:0.5646354353095447
medium_acc:0.4662255030312247
tail_add:0.38637310554312293

[2024-07-19 13:52:11,049][test.py][line:88][INFO] ---------------per_class_acc---------------
[0.54157394, 0.5441336, 0.053333335, 0.6320867, 0.5910007, 0.22222222, 0.30896324, 0.2215909, 0.5244294, 0.16666667, 0.36835334, 0.34260288, 0.3363061, 0.52347845, 0.4725698, 0.6818182, 0.15789473, 0.45647058, 0.80751073, 0.43818983, 0.16129032, 0.11111111, 0.36, 0.2647059, 0.0, 0.27631578, 0.11764706, 0.11111111, 0.41232342, 0.1971831, 0.30545455, 0.17777778, 0.48924658, 0.23870967, 0.2, 0.351585, 0.20689656, 0.18181819, 0.0, 0.23469388, 0.0, 0.31578946, 0.5019326, 0.2972973, 0.30546623, 0.2361111, 0.6666667, 0.21621622, 0.2, 0.24074075, 0.115384616, 0.32711864, 0.41428572, 0.21653543, 0.12666667, 0.27650505, 0.22983871, 0.30397728, 0.21969697, 0.4406515, 0.76126415, 0.5379284, 0.34029227, 0.0, 0.42718446, 0.15384616, 0.0, 0.0, 0.4920635, 0.43396226, 0.4084507, 0.39252338, 0.25, 0.44755244, 0.1724138, 0.40466103, 0.14516129, 0.38717338, 0.26119402, 0.33858266, 0.2672414, 0.713881, 0.25, 0.20833333, 0.5233853, 0.52481204, 0.53739613, 0.725891, 0.0, 0.32692307, 0.045454547, 0.43589744, 0.0, 0.29245284, 0.3617021, 0.4616216, 0.39583334, 0.6960784, 0.5, 0.0, 0.0, 0.0, 0.23529412, 0.57377046, 1.0, 0.20754717, 0.083333336, 0.31578946, 0.13043478, 0.3802817, 0.0, 0.05882353, 0.4532374, 0.57211536, 0.0, 0.14285715, 0.42424244, 0.31914893, 0.3125, 0.375, 0.4827586, 0.41860464, 0.7307692, 0.78723407, 0.8333333, 0.4375, 0.14285715, 0.61538464, 0.5280899, 0.56734693, 0.7, 0.3, 0.125, 0.2857143, 0.24, 0.48351648, 0.19298245, 0.3561644, 0.39130434, 0.31944445, 0.36, 0.45421246, 0.3859649, 0.3685567, 0.33937824, 0.6083916, 0.64935064, 0.8539883, 0.33333334, 0.24074075, 0.0, 0.39130434, 0.09090909, 0.29815304, 0.3574297, 0.0, 0.11111111, 0.23076923, 0.4, 0.4375, 0.5872093, 0.44827586, 0.5720165, 0.3877551, 0.6077922, 0.5801282, 0.6421515, 0.07692308, 0.3644068, 0.44668588, 0.05, 0.06451613, 0.46575344, 0.0625, 0.20833333, 0.5163728, 0.78571427, 0.3877551, 0.304, 0.175, 0.24, 0.48453608, 0.0, 0.14285715, 0.10526316, 0.1875, 0.6363636, 0.0, 0.22727273, 0.2840909, 0.59090906, 0.7457627, 0.4473684, 0.54444444, 0.2, 0.7758621, 0.5952381, 0.84246576, 0.7761194, 0.3846154, 0.28, 0.33333334, 0.4181818, 0.5, 0.84615386, 0.6197183, 0.3846154, 0.33333334, 0.2857143, 0.7741935, 0.5862069, 0.45833334, 0.3030303, 0.64285713, 0.22727273, 0.13636364, 0.81595093, 0.5492958, 0.5, 0.7328767, 0.8031496, 0.74358976, 0.5, 0.375, 0.8382353, 0.6666667, 0.78409094, 0.6666667, 0.4090909, 0.7457627]
