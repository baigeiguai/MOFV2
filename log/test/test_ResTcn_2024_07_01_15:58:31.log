[2024-07-01 15:58:34,928][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Clean_Pymatgen_Wrapped/0', batch_size=128, model_path='checkpoints/ResTcn_1/ResTcn_epoch_64.pth', device='2', mode='test', top_k=5, parallel_model=False, test_name='ResTcn', num_workers=20, log_name='log/test/test_ResTcn_2024_07_01_15:58:31.log')
[2024-07-01 15:58:34,931][test.py][line:35][INFO] ---------------model---------------
ExplorerV1(
  (conv): ResTcn(
    (conv): ModuleList(
      (0): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(2, 16, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (1): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(16, 16, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (2): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(16, 32, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (3): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (4): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (5): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (6): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (7): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (8): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (9): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (10): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (11): Sequential(
        (0): ResBlock1D(
          (pre): Identity()
          (conv): Sequential(
            (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
      (12): Sequential(
        (0): ResBlock1D(
          (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
          (conv): Sequential(
            (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): LeakyReLU(negative_slope=0.01)
            (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
            (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01)
        )
        (1): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      )
    )
  )
  (mlp): Sequential(
    (0): Linear(in_features=1024, out_features=512, bias=True)
    (1): Linear(in_features=512, out_features=230, bias=True)
  )
)
[2024-07-01 15:58:34,932][test.py][line:36][INFO] ---------------device---------------
cuda:2
[2024-07-01 15:58:34,932][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-01 16:02:50,829][test.py][line:75][INFO] ---------------performance---------------	otal_num:142731
error:5.348600
total_acc:0.280681848526001
f1_score:0.22376057505607605
top5_acc:0.6134476661682129
head_acc:0.2910328331567703
medium_acc:0.24139060551383554
tail_add:0.23976043245569448

[2024-07-01 16:02:50,831][test.py][line:86][INFO] ---------------per_class_acc---------------
[0.3392501, 0.28047487, 0.013157895, 0.3132153, 0.28796977, 0.11111111, 0.12001644, 0.09659091, 0.33428115, 0.09836066, 0.21227622, 0.14823009, 0.16075985, 0.25928283, 0.20050924, 0.0, 0.0, 0.14292365, 0.41797125, 0.12910284, 0.03125, 0.05263158, 0.21259843, 0.11764706, 0.0, 0.18421052, 0.05882353, 0.22222222, 0.14101629, 0.112676054, 0.17391305, 0.07777778, 0.2401027, 0.08387097, 0.2, 0.15273775, 0.118644066, 0.27272728, 0.0, 0.12244898, 0.0, 0.28947368, 0.18201876, 0.21621622, 0.12140575, 0.15277778, 0.2, 0.027027028, 0.0, 0.18518518, 0.0, 0.1252115, 0.29577464, 0.05078125, 0.08609272, 0.14875595, 0.12877263, 0.18926553, 0.10526316, 0.20649034, 0.41070667, 0.3875, 0.26195425, 0.0, 0.26213592, 0.07575758, 0.0, 0.0, 0.36507937, 0.12244898, 0.125, 0.1767442, 0.06369427, 0.3216783, 0.0, 0.1970339, 0.06451613, 0.13301663, 0.104477614, 0.09448819, 0.01724138, 0.32152975, 0.125, 0.020833334, 0.17817372, 0.24024025, 0.28531855, 0.22506528, 0.0, 0.25, 0.022222223, 0.19631901, 0.0, 0.20754717, 0.25531915, 0.1961207, 0.20833333, 0.48039216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.26229507, 1.0, 0.018867925, 0.083333336, 0.15789473, 0.08695652, 0.22535211, 0.0, 0.0, 0.34532374, 0.1888, 0.0, 0.14285715, 0.27272728, 0.08510638, 0.25, 0.19642857, 0.22988506, 0.2231884, 0.47435898, 0.63829786, 0.6, 0.08928572, 0.0, 0.41758242, 0.48314607, 0.30081302, 0.4857143, 0.2, 0.0, 0.21428572, 0.12, 0.20652173, 0.07017544, 0.23287672, 0.20869565, 0.20833333, 0.1984127, 0.21245421, 0.2631579, 0.27061856, 0.22020726, 0.40921786, 0.3241491, 0.5410758, 0.0, 0.037037037, 0.0, 0.20289855, 0.0, 0.12565444, 0.26506025, 0.0, 0.11111111, 0.17307693, 0.15135135, 0.2578125, 0.3604651, 0.3448276, 0.38683128, 0.1632653, 0.38181818, 0.428115, 0.27960527, 0.0, 0.16056338, 0.24495678, 0.0, 0.032258064, 0.2431694, 0.0625, 0.125, 0.25376883, 0.6666667, 0.15646258, 0.24, 0.15, 0.0, 0.39175257, 0.0, 0.14285715, 0.05263158, 0.16666667, 0.59090906, 0.0, 0.27272728, 0.11363637, 0.37878788, 0.69491524, 0.21052632, 0.26519337, 0.0, 0.6896552, 0.52380955, 0.64726025, 0.49253732, 0.23076923, 0.2, 0.125, 0.14545454, 0.40625, 0.46386945, 0.33802816, 0.07692308, 0.0, 0.22222222, 0.41935483, 0.62068963, 0.20833333, 0.030303031, 0.2857143, 0.09090909, 0.27272728, 0.67484665, 0.2535211, 0.25, 0.6712329, 0.5826772, 0.55128205, 0.31578946, 0.1875, 0.7382353, 0.54761904, 0.752809, 0.44444445, 0.3181818, 0.20338982]
