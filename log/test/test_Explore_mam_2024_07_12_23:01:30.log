[2024-07-12 23:01:37,210][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ExploreV1_Res_hkl_mam/ExploreV1_Res_hkl_mam_epoch_97.pth', device='2', mode='test', top_k=5, parallel_model=False, test_name='Explore_mam', num_workers=20, log_name='log/test/test_Explore_mam_2024_07_12_23:01:30.log')
[2024-07-12 23:01:37,211][test.py][line:35][INFO] ---------------model---------------
ExplorerV1(
  (predict_hkl_block): BiMamba(
    (layers): ModuleList(
      (0-3): 4 x ResidualBlock(
        (mixer): MambaBlock(
          (in_proj): Linear(in_features=2, out_features=8, bias=False)
          (conv1d): Conv1d(4, 4, kernel_size=(4,), stride=(1,), padding=(3,), groups=4)
          (x_proj): Linear(in_features=4, out_features=33, bias=False)
          (dt_proj): Linear(in_features=1, out_features=4, bias=True)
          (out_proj): Linear(in_features=4, out_features=2, bias=False)
        )
        (norm): RMSNorm()
      )
    )
    (norm_f): RMSNorm()
  )
  (project): Linear(in_features=2, out_features=3, bias=True)
  (conv): ResTcn(
    (conv): Sequential(
      (0): ResBlock1D(
        (pre): Conv1d(3, 32, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (10): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (12): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (14): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (16): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (18): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (20): Dropout(p=0.1, inplace=False)
      (21): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (23): Dropout(p=0.1, inplace=False)
      (24): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (26): Dropout(p=0.1, inplace=False)
      (27): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (29): Flatten(start_dim=1, end_dim=-1)
      (30): Linear(in_features=1024, out_features=230, bias=True)
    )
  )
)
[2024-07-12 23:01:37,212][test.py][line:36][INFO] ---------------device---------------
cuda:2
[2024-07-12 23:01:37,212][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-12 23:05:33,872][test.py][line:77][INFO] ---------------performance---------------	otal_num:141939
error:5.477154
total_acc:0.3510381281375885
f1_score:0.29948222637176514
top5_acc:0.6752477884292603
head_acc:0.36158058648649033
medium_acc:0.3116825512211815
tail_add:0.30253448796140425

[2024-07-12 23:05:33,872][test.py][line:88][INFO] ---------------per_class_acc---------------
[0.3439207, 0.400347, 0.026666667, 0.39349595, 0.33109468, 0.16666667, 0.1251549, 0.17045455, 0.33987162, 0.11666667, 0.18396227, 0.19021134, 0.16024166, 0.3224944, 0.2930168, 0.6818182, 0.05263158, 0.18682353, 0.5932403, 0.196468, 0.12903225, 0.11111111, 0.248, 0.14705883, 0.0, 0.13157895, 0.11764706, 0.0, 0.17924988, 0.12676056, 0.21090908, 0.06666667, 0.25632355, 0.16129032, 0.2, 0.23631124, 0.06896552, 0.27272728, 0.0, 0.1632653, 0.0, 0.34210527, 0.28879073, 0.21621622, 0.09003215, 0.20833333, 0.26666668, 0.10810811, 0.0, 0.2037037, 0.03846154, 0.19322033, 0.32857144, 0.08661418, 0.10666667, 0.13905168, 0.125, 0.1846591, 0.10606061, 0.23025435, 0.5326714, 0.3688872, 0.21920668, 0.0, 0.29126215, 0.06153846, 0.0, 0.0, 0.36507937, 0.26243567, 0.33802816, 0.27102804, 0.12179487, 0.36363637, 0.06896552, 0.29025424, 0.08064516, 0.20190024, 0.1716418, 0.17322835, 0.04310345, 0.45750707, 0.25, 0.020833334, 0.32739422, 0.2631579, 0.39058173, 0.447065, 0.0, 0.30769232, 0.045454547, 0.25333333, 0.0, 0.16981132, 0.19148937, 0.31351352, 0.33333334, 0.627451, 0.5, 0.0, 0.0, 0.0, 0.11764706, 0.27868852, 1.0, 0.03773585, 0.083333336, 0.21052632, 0.08695652, 0.26760563, 0.0, 0.0, 0.42446044, 0.25641027, 0.0, 0.14285715, 0.36363637, 0.25531915, 0.25, 0.21428572, 0.41379312, 0.27906978, 0.6025641, 0.82978725, 0.8, 0.26785713, 0.0, 0.48351648, 0.40449437, 0.33469388, 0.62857145, 0.2, 0.041666668, 0.35714287, 0.1, 0.3956044, 0.14035088, 0.21917808, 0.29565218, 0.30555555, 0.264, 0.2783883, 0.30701753, 0.31443298, 0.19689119, 0.4755245, 0.43344155, 0.6949076, 0.33333334, 0.16666667, 0.0, 0.26708075, 0.09090909, 0.22955145, 0.3172691, 0.0, 0.22222222, 0.1923077, 0.3027027, 0.40625, 0.3255814, 0.41379312, 0.47325101, 0.2857143, 0.44155845, 0.57371795, 0.41383097, 0.0, 0.2542373, 0.24207492, 0.075, 0.0, 0.2849315, 0.0625, 0.16666667, 0.34508815, 0.71428573, 0.33333334, 0.216, 0.15, 0.16, 0.45360824, 0.0, 0.0, 0.10526316, 0.16666667, 0.59090906, 0.0, 0.13636364, 0.11363637, 0.530303, 0.6779661, 0.36842105, 0.40555555, 0.1, 0.70689654, 0.54761904, 0.6849315, 0.76119405, 0.3846154, 0.2, 0.20833333, 0.38181818, 0.5, 0.7086247, 0.3802817, 0.3846154, 0.33333334, 0.2, 0.61290324, 0.62068963, 0.29166666, 0.3030303, 0.5, 0.18181819, 0.13636364, 0.76687115, 0.4225352, 0.35416666, 0.5890411, 0.70866144, 0.67948717, 0.28947368, 0.4375, 0.81764704, 0.4047619, 0.65909094, 0.5138889, 0.3181818, 0.4915254]
