[2024-09-26 11:15:18,840][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/0/', batch_size=256, model_path='/data/ylh/MyExps/MOFV2/checkpoints/HopeV1_ResOnly/HopeV1_ResOnly_epoch_199.pth', device='7', mode='test', top_k=2, parallel_model=False, test_name='HopeV1_ResOnly', num_workers=20, log_name='log/test/test_HopeV1_ResOnly_2024_09_26_11:15:15.log')
[2024-09-26 11:15:18,842][test.py][line:35][INFO] ---------------model---------------
HopeV1ResOnly(
  (conv): ResTcn(
    (intensity_norm): BatchNorm1d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (TCN): Sequential(
      (0): ResBlock1D(
        (pre): Conv1d(2, 32, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (10): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (12): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (14): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (16): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (18): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (20): Dropout(p=0.2, inplace=False)
      (21): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (23): Dropout(p=0.2, inplace=False)
      (24): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (26): Dropout(p=0.2, inplace=False)
      (27): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (29): Flatten(start_dim=1, end_dim=-1)
    )
  )
  (cls): Sequential(
    (0): Linear(in_features=1024, out_features=512, bias=True)
    (1): Linear(in_features=512, out_features=230, bias=True)
  )
)
[2024-09-26 11:15:18,842][test.py][line:36][INFO] ---------------device---------------
cuda:7
[2024-09-26 11:15:18,843][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-09-26 11:16:29,159][test.py][line:78][INFO] ---------------performance---------------
total_num:142729
error:1.975806
total_acc:0.7800727486610413
f1_score:0.5596672296524048
top2_acc:0.8936936259269714
head_acc:0.8318345985674253
medium_acc:0.7622220272245671
tail_add:0.6069646566823559

[2024-09-26 11:16:29,160][test.py][line:89][INFO] ---------------per_class_acc---------------
[0.7474566, 0.7787789, 0.13157895, 0.87238175, 0.82810766, 0.2777778, 0.6370736, 0.35795453, 0.7663053, 0.39344263, 0.74211425, 0.6095133, 0.61185145, 0.81423724, 0.73986846, 0.65217394, 0.36842105, 0.783054, 0.9462792, 0.7242888, 0.34375, 0.10526316, 0.63779527, 0.32352942, 0.0, 0.43421054, 0.1764706, 0.22222222, 0.7957695, 0.29577464, 0.6702899, 0.31111112, 0.80880964, 0.44516128, 0.4, 0.67867434, 0.44067797, 0.54545456, 0.0, 0.3265306, 0.0, 0.6315789, 0.8229454, 0.35135135, 0.57507986, 0.41666666, 0.53333336, 0.3243243, 0.4, 0.33333334, 0.34615386, 0.5786802, 0.52112675, 0.390625, 0.3576159, 0.6183166, 0.5814889, 0.5875706, 0.45864663, 0.74416536, 0.9476373, 0.825, 0.6881497, 0.0, 0.7281553, 0.28787878, 0.0, 0.0, 0.4920635, 0.7244898, 0.5694444, 0.5674419, 0.522293, 0.7132867, 0.13793103, 0.49364406, 0.22580644, 0.456057, 0.2761194, 0.6062992, 0.6896552, 0.83711046, 0.125, 0.6041667, 0.8017817, 0.8198198, 0.6703601, 0.9310705, 0.0, 0.3846154, 0.24444444, 0.50511247, 0.0, 0.509434, 0.38297874, 0.5086207, 0.375, 0.8039216, 0.0, 0.0, 0.0, 0.23076923, 0.1764706, 0.8032787, 1.0, 0.5471698, 0.083333336, 0.31578946, 0.2173913, 0.7887324, 0.0, 0.1764706, 0.705036, 0.912, 0.0, 0.14285715, 0.6363636, 0.61702126, 0.4375, 0.51785713, 0.4827586, 0.7478261, 0.82051283, 0.85106385, 0.93333334, 0.6964286, 0.47619048, 0.6813187, 0.66292137, 0.8821138, 0.87142855, 0.3, 0.32, 0.71428573, 0.46, 0.6847826, 0.54385966, 0.72602737, 0.5043478, 0.5833333, 0.6666667, 0.7875458, 0.49122807, 0.45618558, 0.41709843, 0.75139666, 0.78119934, 0.94350666, 0.33333334, 0.16666667, 0.0, 0.5258799, 0.09090909, 0.35340315, 0.36546186, 0.0, 0.22222222, 0.34615386, 0.6756757, 0.546875, 0.875969, 0.6551724, 0.7366255, 0.46938777, 0.8337662, 0.72523963, 0.89144737, 0.07692308, 0.45352113, 0.4409222, 0.15, 0.0, 0.704918, 0.0625, 0.25, 0.7914573, 0.8, 0.6258503, 0.336, 0.475, 0.32, 0.556701, 0.0, 0.42857143, 0.21052632, 0.33333334, 0.6818182, 0.25, 0.45454547, 0.4318182, 0.6818182, 0.7966102, 0.65789473, 0.73480666, 0.2, 0.8448276, 0.6666667, 0.95547944, 0.80597013, 0.3846154, 0.6, 0.25, 0.8, 0.625, 0.993007, 0.90140843, 0.53846157, 0.33333334, 0.37142858, 0.67741936, 0.7241379, 0.6666667, 0.6666667, 0.85714287, 0.45454547, 0.36363637, 0.8404908, 0.8873239, 0.8541667, 0.9931507, 0.86614174, 1.0, 0.81578946, 0.8125, 0.95, 0.8333333, 0.89772725, 0.9861111, 0.54545456, 0.9830508]
