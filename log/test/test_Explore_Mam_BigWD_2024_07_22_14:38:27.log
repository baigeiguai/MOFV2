[2024-07-22 14:38:36,992][test.py][line:34][INFO] ---------------args---------------
Namespace(data_path='./data/Pymatgen_Wrapped/1/', batch_size=128, model_path='checkpoints/ExploreV1_Res_hkl_Mam_BigWD/ExploreV1_Res_hkl_Mam_BigWD_epoch_60.pth', device='0', mode='test', top_k=5, parallel_model=False, test_name='Explore_Mam_BigWD', num_workers=20, log_name='log/test/test_Explore_Mam_BigWD_2024_07_22_14:38:27.log')
[2024-07-22 14:38:36,994][test.py][line:35][INFO] ---------------model---------------
ExplorerV1(
  (predict_hkl_block): BiMamba(
    (layers): ModuleList(
      (0-3): 4 x ResidualBlock(
        (mixer): MambaBlock(
          (in_proj): Linear(in_features=2, out_features=8, bias=False)
          (conv1d): Conv1d(4, 4, kernel_size=(4,), stride=(1,), padding=(3,), groups=4)
          (x_proj): Linear(in_features=4, out_features=33, bias=False)
          (dt_proj): Linear(in_features=1, out_features=4, bias=True)
          (out_proj): Linear(in_features=4, out_features=2, bias=False)
        )
        (norm): RMSNorm()
      )
    )
    (norm_f): RMSNorm()
  )
  (project): Linear(in_features=2, out_features=3, bias=True)
  (conv): ResTcn(
    (conv): Sequential(
      (0): ResBlock1D(
        (pre): Conv1d(3, 32, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (1): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (3): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (4): ResBlock1D(
        (pre): Conv1d(32, 64, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (5): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): ResBlock1D(
        (pre): Conv1d(64, 128, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (7): MaxPool1d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (8): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (9): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (10): ResBlock1D(
        (pre): Conv1d(128, 256, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (11): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (12): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (13): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (14): ResBlock1D(
        (pre): Conv1d(256, 512, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (15): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(1,))
      (16): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (17): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (18): ResBlock1D(
        (pre): Conv1d(512, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (19): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (20): Dropout(p=0.1, inplace=False)
      (21): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (22): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (23): Dropout(p=0.1, inplace=False)
      (24): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (25): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (26): Dropout(p=0.1, inplace=False)
      (27): ResBlock1D(
        (pre): Identity()
        (conv): Sequential(
          (0): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (1): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): LeakyReLU(negative_slope=0.01)
          (3): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (4): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01)
      )
      (28): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
      (29): Flatten(start_dim=1, end_dim=-1)
      (30): Linear(in_features=1024, out_features=230, bias=True)
    )
  )
)
[2024-07-22 14:38:36,994][test.py][line:36][INFO] ---------------device---------------
cuda:0
[2024-07-22 14:38:36,994][test.py][line:37][INFO] ---------------lossfn---------------
CrossEntropyLoss()
[2024-07-22 14:42:16,177][test.py][line:77][INFO] ---------------performance---------------	otal_num:141939
error:3.667186
total_acc:0.5479114055633545
f1_score:0.41305357217788696
top5_acc:0.8445247411727905
head_acc:0.5711606575985733
medium_acc:0.4723782164663361
tail_add:0.3903712710679453

[2024-07-22 14:42:16,178][test.py][line:88][INFO] ---------------per_class_acc---------------
[0.5490593, 0.54489267, 0.08, 0.63544714, 0.5764495, 0.16666667, 0.31268072, 0.25, 0.5613409, 0.25, 0.36963978, 0.3381535, 0.3294016, 0.51363784, 0.47748902, 0.6818182, 0.23684211, 0.43764704, 0.80107296, 0.43598235, 0.16129032, 0.11111111, 0.4, 0.23529412, 0.0, 0.23684211, 0.11764706, 0.11111111, 0.41768146, 0.2112676, 0.35272726, 0.14444445, 0.5168403, 0.22580644, 0.2, 0.36887607, 0.15517241, 0.22727273, 0.0, 0.24489796, 0.0, 0.39473686, 0.51849806, 0.3243243, 0.34083602, 0.2638889, 0.6, 0.1891892, 0.3, 0.25925925, 0.1923077, 0.33898306, 0.41428572, 0.18110237, 0.20666666, 0.30207777, 0.22983871, 0.33522728, 0.21212122, 0.43842036, 0.7709801, 0.5762418, 0.35281837, 0.0, 0.407767, 0.13846155, 0.0, 0.0, 0.4920635, 0.4682676, 0.32394367, 0.42990655, 0.17948718, 0.46153846, 0.1724138, 0.40254238, 0.14516129, 0.33254156, 0.26865673, 0.32283464, 0.23275863, 0.67280453, 0.1875, 0.25, 0.54120266, 0.5473684, 0.5567867, 0.7489518, 0.0, 0.32692307, 0.13636364, 0.36512822, 0.0, 0.2735849, 0.38297874, 0.48756757, 0.35416666, 0.6862745, 0.5, 0.0, 0.0, 0.07692308, 0.23529412, 0.5409836, 1.0, 0.2264151, 0.083333336, 0.31578946, 0.17391305, 0.46478873, 0.0, 0.05882353, 0.4820144, 0.5801282, 0.0, 0.1904762, 0.3939394, 0.34042552, 0.375, 0.375, 0.4827586, 0.5, 0.7307692, 0.78723407, 0.8333333, 0.49107143, 0.0, 0.5824176, 0.5168539, 0.5795918, 0.6857143, 0.3, 0.041666668, 0.39285713, 0.22, 0.41758242, 0.33333334, 0.369863, 0.40869564, 0.3611111, 0.296, 0.4981685, 0.42105263, 0.39948454, 0.32642487, 0.6055944, 0.64772725, 0.86525464, 0.33333334, 0.2037037, 0.0, 0.42443064, 0.09090909, 0.25065964, 0.3493976, 0.0, 0.11111111, 0.23076923, 0.43243244, 0.4375, 0.6395349, 0.4827586, 0.5967078, 0.3469388, 0.62857145, 0.5897436, 0.64763993, 0.07692308, 0.36158192, 0.42651296, 0.1, 0.06451613, 0.48767123, 0.0625, 0.33333334, 0.56675065, 0.64285713, 0.43537414, 0.304, 0.25, 0.4, 0.5051546, 0.0, 0.14285715, 0.10526316, 0.22916667, 0.59090906, 0.0, 0.27272728, 0.27272728, 0.6060606, 0.7457627, 0.5, 0.5388889, 0.2, 0.70689654, 0.60714287, 0.8287671, 0.67164177, 0.3846154, 0.32, 0.25, 0.3272727, 0.484375, 0.86013985, 0.6619718, 0.30769232, 0.33333334, 0.25714287, 0.67741936, 0.5862069, 0.45833334, 0.24242425, 0.5714286, 0.4090909, 0.18181819, 0.797546, 0.6760563, 0.5416667, 0.7876712, 0.7007874, 0.74358976, 0.55263156, 0.4375, 0.8264706, 0.61904764, 0.75, 0.7083333, 0.36363637, 0.8305085]
